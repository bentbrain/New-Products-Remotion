"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServerPure = void 0;
const crypto_1 = __importDefault(require("crypto"));
const fs_1 = __importDefault(require("fs"));
const http_1 = __importDefault(require("http"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const remotion_1 = require("remotion");
const webpack_1 = __importDefault(require("webpack"));
const dev_middleware_1 = require("./dev-middleware");
const get_port_1 = require("./get-port");
const hot_middleware_1 = require("./hot-middleware");
const routes_1 = require("./routes");
const webpack_config_1 = require("./webpack-config");
const startServerPure = async (entry, userDefinedComponent, options) => {
    var _a, _b, _c, _d, _e;
    const tmpDir = await fs_1.default.promises.mkdtemp(path_1.default.join(os_1.default.tmpdir(), 'react-motion-graphics'));
    const config = (0, webpack_config_1.webpackConfig)({
        entry,
        userDefinedComponent,
        outDir: tmpDir,
        environment: 'development',
        webpackOverride: (_a = options === null || options === void 0 ? void 0 : options.webpackOverride) !== null && _a !== void 0 ? _a : remotion_1.Internals.getWebpackOverrideFn(),
        inputProps: (_b = options === null || options === void 0 ? void 0 : options.inputProps) !== null && _b !== void 0 ? _b : {},
        envVariables: (_c = options === null || options === void 0 ? void 0 : options.envVariables) !== null && _c !== void 0 ? _c : {},
        maxTimelineTracks: (_d = options === null || options === void 0 ? void 0 : options.maxTimelineTracks) !== null && _d !== void 0 ? _d : 15,
    });
    const compiler = (0, webpack_1.default)(config);
    const hash = `/static-${crypto_1.default.randomBytes(6).toString('hex')}`;
    /**
     * TODO: Put static server
     */
    const wdmMiddleware = (0, dev_middleware_1.wdm)(compiler);
    const whm = (0, hot_middleware_1.webpackHotMiddleware)(compiler);
    const server = http_1.default.createServer((request, response) => {
        new Promise((resolve) => {
            wdmMiddleware(request, response, () => {
                resolve();
            });
        })
            .then(() => {
            return new Promise((resolve) => {
                whm(request, response, () => {
                    resolve();
                });
            });
        })
            .then(() => {
            (0, routes_1.handleRoutes)(hash, request, response);
        })
            .catch((err) => {
            response.setHeader('content-type', 'application/json');
            response.writeHead(500);
            response.end(JSON.stringify({
                err: err.message,
            }));
        });
    });
    const desiredPort = (_e = options === null || options === void 0 ? void 0 : options.port) !== null && _e !== void 0 ? _e : undefined;
    const port = await (0, get_port_1.getDesiredPort)(desiredPort, 3000, 3100);
    server.listen(port);
    return port;
};
exports.startServerPure = startServerPure;
