"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareEntryPoint = void 0;
const renderer_1 = require("@remotion/renderer");
const promises_1 = require("fs/promises");
const path_1 = __importDefault(require("path"));
const process_1 = require("process");
const log_1 = require("./log");
const setup_cache_1 = require("./setup-cache");
const prepareEntryPoint = async ({ file, otherSteps, publicPath, outDir, }) => {
    if (renderer_1.RenderInternals.isServeUrl(file)) {
        return { urlOrBundle: file, steps: otherSteps, shouldDelete: false };
    }
    const joined = path_1.default.resolve(process.cwd(), file);
    try {
        const stats = await (0, promises_1.stat)(joined);
        if (stats.isDirectory()) {
            return { urlOrBundle: joined, steps: otherSteps, shouldDelete: false };
        }
    }
    catch (err) {
        log_1.Log.error(`No file or directory exists at ${joined}.`);
        (0, process_1.exit)(1);
    }
    const urlOrBundle = await (0, setup_cache_1.bundleOnCli)({
        fullPath: joined,
        steps: ['bundling', ...otherSteps],
        outDir,
        publicPath,
    });
    return { urlOrBundle, steps: ['bundling', ...otherSteps], shouldDelete: true };
};
exports.prepareEntryPoint = prepareEntryPoint;
